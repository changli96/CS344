#!/bin/bash

filein() {
  FILE=""
  while read -r line; do
    FILE=$FILE$line$"\n"
  done < "$1"
}

numLines() {
  numL=0
  while read -r line; do
    numL=$(($numL + 1))
  done < "$1"
}

dims() {
   if ! [[ -r $1 ]]; then
      echo "ERR">&2
      exit 1
   fi
  numLines $1
  x=$numL
  grep -o $'\t' $1 > $t0
  numLines $t0
  y=$numL
  if [[ $x = 0 ]]; then
     x=1
  fi
  COLS=$((y/x))
  COLS=$(($COLS+1))
  echo $x $COLS
}

transpose() {
  dims $1 > $t0
  dim1=$(cat $t0)

  filein $1
  FILE1=$FILE
  ROWS=$x
  COLS=$COLS
  TOTALLEN=$((x * COLS))
  TOTALLEN=$((TOTALLEN - 1))
  POS1=$"0"
  re=[0-9-]

rowString=""
colString=""

   echo "$FILE1" | grep -o "[0-9-]*[$'\t'$'\n']*" | grep -o "[0-9-]*" >$t1
   FILE1=$(cat $t1)
   cat -A $t1
   for ((col=1; col <= $COLS; col++)) do
      rowString=""
      POS1="0";
      for ((row=1; row <= $ROWS; row++)) do
         num1=""
         charCTR="0"
         while [[ $charCTR < $col ]]; do
            num1=""
            while [[ ${FILE1:$POS1:1} =~ ${re} ]]; do
               num1=$num1${FILE1:$POS1:1}
               POS1=$(($POS1 + 1))
               echo $num1
            done
            POS1=$(($POS1 + 1))
            echo $num1
            charCTR=$(($charCTR + 1))
         done
         rowString=$rowString$sep$num1
         ##Move to next row
         ffcount=$"0"
         while [[ $(($ffcount + $col)) < $COLS ]]; do
            while [[ ${FILE1:$POS1:1} =~ ${re} ]]; do
               num1=$num1${FILE1:$POS1:1}
               POS1=$(($POS1 + 1))
            done
            ffcount=$(($ffcount + 1))
         done
         echo ROW:$rowString
      done
      colString=$colString$sep$rowString
      echo COL:$colString
   done
   finalstr=$colString

#   if [[ $TOTALLEN = $(($count)) ]];
#   then
#      sep=""
#   else if [[ $rowcount = $COLS ]];
#      then
#         sep="\n"
#         rowcount=$"0"
#      else
#         sep="\t"
#      fi
#   fi
#    finalstr=$finalstr$num3$sep
#    count=$(($count + 1))
#  done
  echo -e $finalstr
}

mean() {
   filein $1
   FILE1=$FILE
   dims $1 > $t0
   dim1=$(cat $t0)
   ROWS=$x
   COLS=$COLS

   TOTALLEN=$((x * COLS))
   TOTALLEN=$((TOTALLEN - 1))
   POS1=$"0"
   curRow=$"0"
   curColumn=$"0"
   resString="0"
   for ((i=2; i<=$COLS; i++)) do
      resString=$resString"\t0"
   done
   echo "$FILE1" | grep -o "[0-9-]*[$'\t'$'\n']*" | grep -o "[0-9-]*" > $t1
   FILE1=$(cat $t1)
   while [[ $count -le $TOTALLEN ]]; do
      num1=$""
      re=[0-9-]
      while [[ ${FILE1:$POS1:1} =~ ${re} ]]; do
         num1=$num1${FILE1:$POS1:1}
         POS1=$(($POS1 + 1))
      done
      POS1=$(($POS1 + 1))
      #echo $num1
      countB=$"0"
      POS2=$"0"
      while [[ $countB -ne $curColumn ]]; do
         num2=$""
         while [[ ${resString:$POS2:1} =~ ${re} ]]; do
            num2=$num2${resString:$POS2:1}
            POS2=$(($POS2 + 1))
         done
         POS2=$(($POS2 + 2))
         countB=$(($countB + 1))
      done
      prestring=${resString:0:$POS2}
      num2=""
      while [[ ${resString:$POS2:1} =~ ${re} ]]; do
         num2=$num2${resString:$POS2:1}
         POS2=$(($POS2 + 1))
      done
      curNum=$((num2 + num1))
      postString=${resString:$POS2:${#resString}}
      #echo -e $prestring":"$curNum":"$postString
      resString=$prestring$curNum$postString
      count=$(($count + 1))
      if [[ $curColumn < $(($COLS -1)) ]]; then
         curColumn=$(($curColumn + 1))
      else
         curRow=$(($curRow + 1))
         curColumn=$"0"
      fi
   done
   #echo -e $resString
   echo "$resString" | grep -o "[0-9-]*[$'\t'$'\n']*" | grep -o "[0-9-]*" > $t1
   resString=$(cat $t1)
   #echo -e $resString
   POS1=$"0"
   count="1"
   while [[ $count -le $COLS ]]; do
      re=[0-9-]
      num1=""
      while [[ ${resString:$POS1:1} =~ ${re} ]]; do
         num1=$num1${resString:$POS1:1}
         POS1=$(($POS1 + 1))
      done
      POS1=$(($POS1 + 1))
      curNum=$((num1 / $ROWS))
      if [[ $count = $COLS ]];
      then sep=""
      else sep="\t"
      fi
      finalString=$finalString$curNum$sep
      #echo -e $finalString
      count=$(($count + 1))
   done
   echo -e $finalString
}

add() {
  dims $1 > $t0
  dim1=$(cat $t0)
  dims $2 > $t0
  dim2=$(cat $t0)
  if [[ "$dim1" != "$dim2" ]]; then
      echo "Can't add mismatched matrices." >&2
      exit 1
  fi

  filein $1
  FILE1=$FILE
  filein $2
  FILE2=$FILE
  ROWS=$x
  COLS=$COLS
  TOTALLEN=$((x * COLS))
  TOTALLEN=$((TOTALLEN - 1))
  POS1=$"0"
  POS2=$"0"

  echo "$FILE1" | grep -o "[0-9-]*[$'\t'$'\n']*" | grep -o "[0-9-]*" > $t1
  FILE1=$(cat $t1)
  echo "$FILE2" | grep -o "[0-9-]*[$'\t'$'\n']*" | grep -o "[0-9-]*" > $t2
  FILE2=$(cat $t2)
  while [[ $count -le $TOTALLEN ]]; do
    num1=$""
    num2=$""
    re=[0-9-]
    while [[ ${FILE1:$POS1:1} =~ ${re} ]]; do
      num1=$num1${FILE1:$POS1:1}
      POS1=$(($POS1 + 1))
    done
    POS1=$(($POS1 + 1))
    while [[ "${FILE2:$POS2:1}" =~ ${re} ]]; do
      num2=$num2${FILE2:$POS2:1}
      POS2=$(($POS2 + 1))
    done
    POS2=$(($POS2 + 1))
    rowcount=$(($rowcount + 1))
    num3=$((num1 + num2))
    if [[ $TOTALLEN = $(($count)) ]];
    then
      sep=""
   else if [[ $rowcount = $COLS ]];
    then
      sep="\n"
      rowcount=$"0"
   else
      sep="\t"
    fi
fi
    finalstr=$finalstr$num3$sep
    count=$(($count + 1))
  done
  echo -e $finalstr
}

multiply() {
   dims $1 > $t0
   dim1=$(cat $t0)
   dims $2 > $t0
   dim2=$(cat $t0)
   if [[ "$dim1" != "$dim2" ]]; then
      echo "Can't multiply mismatched matrices." >&2
      exit 1
   fi

   filein $1
   FILE1=$FILE
   filein $2
   FILE2=$FILE
   ROWS=$x
   COLS=$COLS
   TOTALLEN=$((x * COLS))
   TOTALLEN=$((TOTALLEN - 1))
   POS1=$"0"
   POS2=$"0"

   echo "$FILE1" | grep -o "[0-9-]*[$'\t'$'\n']*" | grep -o "[0-9-]*" > $t1
   FILE1=$(cat $t1)
   echo "$FILE2" | grep -o "[0-9-]*[$'\t'$'\n']*" | grep -o "[0-9-]*" > $t2
   FILE2=$(cat $t2)
   while [[ $count -le $TOTALLEN ]]; do
     num1=$""
     num2=$""
     re=[0-9-]
     while [[ ${FILE1:$POS1:1} =~ ${re} ]]; do
      num1=$num1${FILE1:$POS1:1}
      POS1=$(($POS1 + 1))
     done
     POS1=$(($POS1 + 1))
     while [[ "${FILE2:$POS2:1}" =~ ${re} ]]; do
      num2=$num2${FILE2:$POS2:1}
      POS2=$(($POS2 + 1))
     done
     POS2=$(($POS2 + 1))
     rowcount=$(($rowcount + 1))
     num3=$((num1 * num2))
     if [[ $TOTALLEN = $(($count)) ]];
     then
       sep=""
    else if [[ $rowcount = $COLS ]];
     then
       sep="\n"
       rowcount=$"0"
    else
       sep="\t"
     fi
 fi
     finalstr=$finalstr$num3$sep
     count=$(($count + 1))
   done
   echo -e $finalstr
}

###MAIN###
targ1="$(mktemp temp.XXXXX)"
targ2="$(mktemp temp.XXXXX)"
t0="$(mktemp temp.XXXXX)"
t1="$(mktemp temp.XXXXX)"
t2="$(mktemp temp.XXXXX)"
trap "rm -rf $targ1 $targ2 $t0 $t1 $t2; trap - EXIT" INT HUP TERM EXIT

case "$1" in
   dims|d)
      if [ $# -gt 2 ]; then
         echo "ERROR: Expected 1 arg, got $#." >&2
         exit 1
      else
         if [ -r $2 ]; then
            cat $2> $targ1
            dims "$targ1"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   transpose|t)
      if [ $# -gt 2 ]; then
         echo "ERROR: Expected 1 arg, got $#." >&2
         exit 1
      else
         if [ -r $2 ]; then
            cat $2> $targ1
            transpose "$targ1"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   mean|m)
      if [ $# -gt 2 ]; then
         echo "ERROR: Expected 1 arg, got $#." >&2
         exit 1
      else
         if [ -r $2 ]; then
            cat $2> $targ1
            mean "$targ1"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   add|a)
      if [ $# -gt 3 ] || [ $# -le 2 ]; then
         echo "ERROR: Expected 2 args, got $#." >&2
         exit 1
      else
         if [ -r $2 ] && [ -r $3 ]; then
            cat $2> $targ1
            cat $3> $targ2
            add "$targ1" "$targ2"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   multiply|M)
      if [ $# -gt 3 ]; then
         echo "ERROR: Expected 2 args, got $#." >&2
         exit 1
      else
         if [ -r $2 ] && [ -r $3 ]; then
            cat $2> $targ1
            cat $3> $targ2
            multiply "$targ1" "$targ2"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   help|h)
      echo $"Usage: $0 {dims|transpose|mean|add|multiply}"
      ;;
   *)
      echo -e $"Command Does not Exist!\nUsage: $0 {dims|transpose|mean|add|multiply}">&2
      exit 1
esac
exit 0
