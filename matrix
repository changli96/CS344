#!/bin/bash
##ZACHARY HORINE
##CS344---BLOCK1
#WINTER QTR 2018
################

filein() {
  FILE=""
  while read -r line; do
    FILE=$FILE$line$"\n"
  done < "$1"
}

numLines() {
  numL=0
  while read -r line; do
    numL=$(($numL + 1))
  done < "$1"
}

dims() {
   if ! [[ -r $1 ]]; then
      echo "ERR">&2
      exit 1
   fi
  numLines $1
  x=$numL
  grep -o $'\t' $1 > $t0
  numLines $t0
  y=$numL
  if [[ $x = 0 ]]; then
     x=1
  fi
  COLS=$((y/x))
  COLS=$(($COLS+1))
  echo $x $COLS
}

transpose() {
   dims $1 > $t0
   dim1=$(cat $t0)
   ROWS=$x
   COLS=$COLS
   FILESTR=$( cat $1 | tr '\n' '\t' )
   POS1=1
   for((curCol=0;curCol<COLS;curCol++)); do
      for((curRow=0;curRow<ROWS;curRow++)); do
         echo "$FILESTR" | cut -f $POS1 | tr -d "\n"
         if [ $(($curRow + 1)) -lt $ROWS ]; then
            printf "\t"
         fi
         POS1=$(($POS1 + $COLS))
         done
      printf "\n"
      POS1=$(($curCol + 2))
   done
}

mean() {
   for (( curCol=1;curCol<=COLS;curCol++ )); do
      total=$"0"
      col=$(cut -f "$curCol" $1 | tr '\n' '\t')
      #echo $col
      for i in $col; do
         total=$(($total + $i))
      done
      rowMojo=$(((ROWS/2)*( (total>0)*2-1 )))
      mean=$(((total + rowMojo) / ROWS))

      printf "%d" $mean
      if [[ $curCol = $COLS ]]; then
         echo ""
      else
         printf "\t"
      fi
   done
}

add() {
  dims $1 > $t0
  dim1=$(cat $t0)
  dims $2 > $t0
  dim2=$(cat $t0)
  if [[ "$dim1" != "$dim2" ]]; then
      echo "Can't add mismatched matrices." >&2
      exit 1
  fi

  filein $1
  FILE1=$FILE
  filein $2
  FILE2=$FILE
  ROWS=$x
  COLS=$COLS
  TOTALLEN=$((x * COLS))
  TOTALLEN=$((TOTALLEN - 1))
  POS1=$"0"
  POS2=$"0"

  echo "$FILE1" | grep -o "[0-9-]*[$'\t'$'\n']*" | grep -o "[0-9-]*" > $t1
  FILE1=$(cat $t1)
  echo "$FILE2" | grep -o "[0-9-]*[$'\t'$'\n']*" | grep -o "[0-9-]*" > $t2
  FILE2=$(cat $t2)
  while [[ $count -le $TOTALLEN ]]; do
    num1=$""
    num2=$""
    re=[0-9-]
    while [[ ${FILE1:$POS1:1} =~ ${re} ]]; do
      num1=$num1${FILE1:$POS1:1}
      POS1=$(($POS1 + 1))
    done
    POS1=$(($POS1 + 1))
    while [[ "${FILE2:$POS2:1}" =~ ${re} ]]; do
      num2=$num2${FILE2:$POS2:1}
      POS2=$(($POS2 + 1))
    done
    POS2=$(($POS2 + 1))
    rowcount=$(($rowcount + 1))
    num3=$((num1 + num2))
    if [[ $TOTALLEN = $(($count)) ]];
    then
      sep=""
   else if [[ $rowcount = $COLS ]];
    then
      sep="\n"
      rowcount=$"0"
   else
      sep="\t"
    fi
fi
    finalstr=$finalstr$num3$sep
    count=$(($count + 1))
  done
  echo -e $finalstr
}

multiply() {
   dims $1 > $t0
   dim1=$(cat $t0)
   ROWS1=$COLS
   COLS1=$x
   dims $2 > $t0
   dim2=$(cat $t0)
   ROWS2=$COLS
   COLS2=$x
   if [ "$ROWS1" != "$COLS2" ]; then
      echo "Can't multiply mismatched matrices." >&2
      exit 1
   fi
   for ((x=1; x<=$COLS1; x++)); do
      head -n $x $1 | tail -1 > $t1
      for ((y=1; y<=$ROWS2; y++)); do
         SUM=$"0"
         cut -f $y $2 | tr "\n" "\t" > $t2
         for ((z=1; z<=$COLS2; z++)); do
            num1=$(cut -f $z $t1)
            num2=$(cut -f $z $t2)
            prod=$((num1 * num2))
            SUM=$(($SUM + $prod))
         done
         printf "%d" $SUM
         if [ $(($y % $ROWS2)) -eq 0 ]; then
            printf "\n"
         else
            printf "\t"
         fi
      done
   done
   exit 0
}

###MAIN###
targ1="$(mktemp temp.XXXXX)"
targ2="$(mktemp temp.XXXXX)"
t0="$(mktemp temp.XXXXX)"
t1="$(mktemp temp.XXXXX)"
t2="$(mktemp temp.XXXXX)"
tout="$(mktemp temp.XXXXXX)"
trap "rm -rf $targ1 $targ2 $t0 $t1 $t2 $tout; trap - EXIT" INT HUP TERM EXIT

case "$1" in
   dims|d)
      if [ $# -gt 2 ]; then
         echo "ERROR: Expected 1 arg, got $#." >&2
         exit 1
      else
         if [ -r $2 ]; then
            cat $2> $targ1
            dims "$targ1"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   transpose|t)
      if [ $# -gt 2 ]; then
         echo "ERROR: Expected 1 arg, got $#." >&2
         exit 1
      else
         if [ -r $2 ]; then
            cat $2> $targ1
            transpose "$targ1"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   mean|m)
      if [ $# -gt 2 ]; then
         echo "ERROR: Expected 1 arg, got $#." >&2
         exit 1
      else
         if [ -r $2 ]; then
            cat $2> $targ1
            mean "$targ1"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   add|a)
      if [ $# -gt 3 ] || [ $# -le 2 ]; then
         echo "ERROR: Expected 2 args, got $#." >&2
         exit 1
      else
         if [ -r $2 ] && [ -r $3 ]; then
            cat $2> $targ1
            cat $3> $targ2
            add "$targ1" "$targ2"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   multiply|M)
      if [ $# -gt 3 ]; then
         echo "ERROR: Expected 2 args, got $#." >&2
         exit 1
      else
         if [ -r $2 ] && [ -r $3 ]; then
            cat $2> $targ1
            cat $3> $targ2
            multiply "$targ1" "$targ2"
         else
            echo "ERROR: Bad file." >&2
            exit 1
         fi
      fi
      ;;
   help|h)
      echo $"Usage: $0 {dims|transpose|mean|add|multiply}"
      ;;
   *)
      echo -e $"Command Does not Exist!\nUsage: $0 {dims|transpose|mean|add|multiply}">&2
      exit 1
esac
exit 0
