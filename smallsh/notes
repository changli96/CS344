#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>



void parseCmd() {
   int nextwordType = COMMAND;
   numargs = 0;
   if (strstr(linein,"#") == linein) {
      //this is a comment, exit parsing and return blank string
      sprintf(command,"%s","");
      fflush(stdout);
      return;
   }
   char *word = strtok(linein, " \n");
   while (word != NULL) {
      fflush(stdout);

      //look for all occurences of '$$' and replace them with the PID
      while (strstr(word,"$$") != NULL){
         char pid[10];
         printf("%d", getpid());
         sprintf(pid,"%d",getpid());
         char newstring[strlen(word) + strlen(pid)];
         strcpy(newstring,word);
         char *s = strstr(newstring,"$$");
         char *secondhalf = strstr(word,"$$")+2;
         strncpy(s,pid,strlen(pid));
         strcpy(s+strlen(pid),secondhalf);
         strcpy(word,newstring);
      }
      if (strcmp(word,"<") == 0) {
         word = strtok(NULL," \n");
         if (word != NULL) {
            sprintf(stdinLoc,"%s",word);
            nextwordType = ARG;
         }
      }
      else if (strcmp(word,">") == 0) {
         word = strtok(NULL," \n");
         if (word != NULL) {
            sprintf(stdoutLoc,"%s",word);
            nextwordType = ARG;
         }
      }
      else if (strcmp(word,"&") == 0) {
         word = strtok(NULL," \n");
         if (word == NULL) {
            backgroundProcess = true;
         }
      }
      else if (nextwordType == COMMAND) {
         sprintf(command, "%s", word);
         nextwordType = ARG;
      }
      else if (nextwordType == ARG) {
         args[numargs] = word;
         numargs++;
      }
      if (word != NULL){
         word = strtok(NULL," \n");
      }
   }
}


//if not a background process, set the ctrlc and ctrlz values back to operational
if (backgroundProcess == false || allowBackground == false){
   signal(SIGINT, SIG_DFL);
   signal(SIGTSTP, SIG_DFL);
}
//set the input and output sources. if not set, then they will default to stdin and stdout
if (strcmp(stdinLoc,"") != 0){
   int infile = open(stdinLoc,O_RDONLY);
   if (infile == -1) { //fail to read file
      printf("Cannot open file for input: %s", stdinLoc);
      status = 1;
   }
   else {
      dup2(infile,0);
      fcntl(infile, F_SETFD, FD_CLOEXEC);
   }
}
else if(backgroundProcess && allowBackground){
   int devnull = open("/dev/null",O_WRONLY);
   dup2(devnull,0);
}
if (strcmp(stdinLoc,"") != 0){
   int outfile = open(stdoutLoc,O_WRONLY | O_APPEND | O_CREAT);
   if (outfile == -1) { //fail to write file
      printf("Cannot open file for output: %s", stdoutLoc);
      status = 1;
   }
   else {
      dup2(outfile,1);
      fcntl(outfile, F_SETFD, FD_CLOEXEC);
   }
}
else if(backgroundProcess && allowBackground){
   int devnull = open("/dev/null",O_WRONLY);
   dup2(devnull,1);
}

int result = execvp(command,args);
if (result < 0){
   printf("Bad Command!\n");
   fflush(stdout);
   result = 0;
}
}
else{
if (backgroundProcess && allowBackground){
   printf("Background process id is %d\n", forkedPid);
   fflush(stdout);
   backgroundProcesses[numBackgroundProcesses] = forkedPid;
   numBackgroundProcesses++;
}
else{ //handle foreground waiting
   int child = waitpid(forkedPid,&status,0);
   if(status == 256){status = 1;}
   else if(WIFEXITED(status) <= 0){
      printf("Process exited with value of %d\n",WTERMSIG(status));
      fflush(stdout);
   }
}
}










void getInput(char **args, int *numargs, char stdinLoc[512], char stdoutLoc[512], int *backgroundProcess,int pid){
   *backgroundProcess = 0;

   char pidstr[10];
   sprintf(pidstr,"%d",getpid());
   char linein[2048];

   //get input
   printf(": ");
   fflush(stdout);
   fgets(linein, 2048, stdin);
   /*
   if (strstr(linein,"#") == linein) {
      //this is a comment, exit parsing and return
      return;
   }*/
   char *word = strtok(linein, " \n");

   while (word != NULL) {
      //look for all occurences of '$$' and replace them with the PID
      while (strstr(word,"$$") != NULL){

         printf("%d", getpid());

         char newstring[strlen(word) + strlen(pid)];
         strcpy(newstring,word);
         char *s = strstr(newstring,"$$");
         char *secondhalf = strstr(word,"$$")+2;
         strncpy(s,pid,strlen(pid));
         strcpy(s+strlen(pid),secondhalf);
         strcpy(word,newstring);
      }
      if (strcmp(word,"<") == 0) {
         word = strtok(NULL," \n");
         if (word != NULL) {
            sprintf(stdinLoc,"%s",word);
         }
      }
      else if (strcmp(word,">") == 0) {
         word = strtok(NULL," \n");
         if (word != NULL) {
            sprintf(stdoutLoc,"%s",word);
         }
      }
      else if (strcmp(word,"&") == 0) {
         word = strtok(NULL," \n");
         if (word == NULL) {
            *backgroundProcess = 1;
         }
      }
      else {
         args[*numargs] = word;
         *numargs+=1;
      }
      if (word != NULL){
         word = strtok(NULL," \n");
      }
   }
   return;
}
